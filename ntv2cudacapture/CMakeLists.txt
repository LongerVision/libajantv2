project(ntv2cudacapture)

message("added ntv2cudacapture")

find_package(Qt5 HINTS ${AJA_QT_DIR} COMPONENTS
    Core
    REQUIRED)

set(QT_LIBRARIES
    Qt5::Core)

set(NTV2CUDACAPTURE_ROOT ${CMAKE_CURRENT_SOURCE_DIR})

set(NTV2CUDACAPTURE_TARGET_INCLUDE_DIRS
	${AJA_LIBRARIES_ROOT}
	${AJA_APPS_ROOT}/crossplatform/demoapps
	${AJA_LIB_NTV2_ROOT}/includes
	${AJA_LIB_RETAIL_ROOT}/includes
	${AJA_LIB_RETAIL_ROOT}/services)

set(NTV2CUDACAPTURE_HEADERS
	ntv2cudacapture.h)
set(NTV2CUDACAPTURE_SOURCES
	ntv2cudacapture.cpp)

set(DEMO_APPS_SOURCES
	${CMAKE_CURRENT_SOURCE_DIR}/../ntv2democommon.cpp)
set(DEMO_APPS_HEADERS
	${CMAKE_CURRENT_SOURCE_DIR}/../ntv2democommon.h)

if (CMAKE_SYSTEM_NAME STREQUAL "Windows")
	# noop
elseif (CMAKE_SYSTEM_NAME STREQUAL "Darwin")
	find_library(FOUNDATION_FRAMEWORK Foundation)
	set(EXTRA_LIBRARIES ${FOUNDATION_FRAMEWORK})
elseif (CMAKE_SYSTEM_NAME STREQUAL "Linux")
	set(EXTRA_LIBRARIES cuda cudart dl pthread rt)
endif()

set(NTV2CUDACAPTURE_TARGET_SOURCES
	${NTV2CUDACAPTURE_SOURCES}
	${NTV2CUDACAPTURE_HEADERS}
	${DEMO_APPS_SOURCES}
	${DEMO_APPS_HEADERS})

add_executable(ntv2cudacapture ${NTV2CUDACAPTURE_TARGET_SOURCES})
add_dependencies(ntv2cudacapture ajantv2)
target_include_directories(ntv2cudacapture PUBLIC ${NTV2CUDACAPTURE_TARGET_INCLUDE_DIRS})
target_link_libraries(ntv2cudacapture PUBLIC ajantv2 ${EXTRA_LIBRARIES} ${QT_LIBRARIES})

install(TARGETS ntv2cudacapture
	ARCHIVE DESTINATION ${AJA_INSTALL_LIBDIR}
	LIBRARY DESTINATION ${AJA_INSTALL_LIBDIR}
	RUNTIME DESTINATION ${AJA_INSTALL_BINDIR}
	FRAMEWORK DESTINATION ${AJA_INSTALL_FRAMEWORKDIR})
