/**
@page	demoapps

@section	ntv2outputtestpattern		NTV2OutputTestPattern Demo

This command-line program demonstrates how to “push” a single test pattern frame to an AJA device and have it play that
video signal forever without further action needed by the host.

@image	html	ntv2outputtestpattern.png

Typical WFM display showing the output of an AJA device thatʼs connected to a host running <b>ntv2outputtestpattern</b>.
(Audio playout is shown because “loopback” was enabled and an input signal was connected to the deviceʼs input.)

The ::NTV2OutputTestPattern class demonstrates…
-	how to generate a test pattern of a particular video geometry and get it into a host buffer with the correct pixel format;
-	how to transfer a single frame to an AJA device using DMA;
-	how to programmatically perform device configuration and signal routing;
-	how to be a “good citizen” to detect if another application is already using the device.

@note	This demo only works for non-UHD/4K/UHD2/8K formats.

The critical parts of the demo (for troubleshooting):
-	Configuring the FrameStore/Channel being used:
	-	Enabling a FrameStore using CNTV2Card::EnableChannel.
	-	Setting the FrameStoreʼs mode to “playout” (as opposed to “capture”) using CNTV2Card::SetMode.
	-	Setting the FrameStoreʼs raster pixel format using CNTV2Card::SetFrameBufferFormat (fixed at 8-bit YCbCr).
	-	By default, this demo uses the FrameStoreʼs existing video format, but this can be overridden using the <tt>-v</tt> option.
		-	If the -v option is used, CNTV2Card::SetVideoFormat will be called.
		-	If the -v option is <b><i>not</i></b> used, CNTV2Card::GetVideoFormat will be called.
-	Setting the output clocking reference to “free run” using CNTV2Card::SetReference.
-	Routing the signal from the FrameStore to whatever video outputs are available on the device by calling CNTV2Card::Connect.
-	Ensuring that bi-directional SDI connectors are configured for output by calling CNTV2Card::SetSDITransmitEnable.
-	Transferring the test pattern image from the host to device memory using CNTV2Card::DMAWriteFrame.
-	The frame being played by the FrameStore (and read from device memory) is dictated by the deviceʼs “output frame register”
	(\c kRegCh<b>N</b>OutputFrame). This demo interrogates the frame number using CNTV2Card::GetOutputFrame, and writes the image
	into that frame. Alternatively, the demo could have transferred the image into a specific frame number, and set the FrameStore
	to play that frame using CNTV2Card::SetOutputFrame.


<b>Command line usage:</b>
@code
	ntv2outputtestpattern  [options...]
	
	-d|--device  {spec}        Specifies the device to use by index number, serial number or generic model name.
	                           Defaults to first device (index 0).
	                           If model name specified, uses lowest-numbered matching device.
	                           Specify '?' to list the available devices.

	-c|--channel  {spec}       Specifies the framestore/channel as an unsigned integer number 1 thru 8.
	                           Defaults to first channel (index 0).

	-p|--pattern {spec}        Optionally specifies the test pattern (or flat-field color) to show.
	                           Defaults to 100% Bars.
	                           Specify '?' to list the available patterns or colors.

	-v|--videoFormat {spec}    Optionally specifies the video format to use.
	                           Defaults to whatever video format the device is currently using.
	                           Specify '?' or 'list' to list the available video formats.

	--pixelFormat {spec}       Optionally specifies the pixel format to use. Defaults to 8-bit YCbCr.
	                           Specify '?' or 'list' to list the available formats.

	--vanc {spec}              Optionally specifies the VANC mode to use:
	                                0 | off | none           Disables VANC
	                                1 | on | tall            Enables "tall" VANC
	                                2 | taller | tallest     Enables "taller" VANC

	-?|--help|--usage          Shows how to use this command.
@endcode
**/
