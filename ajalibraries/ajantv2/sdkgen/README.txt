The 'ajalibraries/ajantv2/sdkgen' folder contains files that generate many function implementations in the NTV2 SDK.

NOTE:	The 'sdkgen' folder is private, and not intended to ship with the SDK.


ABOUT THE DEVICE FEATURES FILES IN 'ajantv2/includes' and 'ajantv2/src':

	ntv2devicefeatures.h		Declares all DeviceFeatures functions that are not generated from .gen files.
								This file #includes the generated 'ntv2devicefeatures.hh' header file.

	ntv2devicefeatures.cpp		Implements all DeviceFeatures functions that are not generated from .gen files.
								This file #includes the generated 'ntv2devicefeatures.hpp' implementation file.

	ntv2devicefeatures.hh		Contains all declarations of all functions generated by the 'ntv2sdkgen.py' script.
								A version of this file is checked into source control for the benefit of AJA developers,
								BUT IT IS NOT CANONICAL.

	ntv2devicefeatures.hpp		Contains all implementations of all functions generated by the 'ntv2sdkgen.py' script
								A version of this file is checked into source control for the benefit of AJA developers
								BUT IT IS NOT CANONICAL.


ABOUT SDKGEN FILES

	ntv2sdkgen.py               Python script that parses 'includes/ntv2enums.h' and the '.gen' files inside 'sdkgen/devices'.
	                            * Use the --ohh option to specify a folder where to write the 'ntv2devicefeatures.hh' file.
	                              If not specified, no .hh file is written.
	                            * Use the --ohpp option to specify a folder where to write a 'ntv2devicefeatures.hpp' file.
	                              If not specified, no .hpp file is written.
	                            * Use the --csv option to specify a folder where to write these CSV files:
	                                  CanDo.csv             Per-device return values for every "CanDo" function.
	                                  ConversionModes.csv   Supported per-device NTV2ConversionModes.
	                                  DSKModes.csv          Supported per-device NTV2DSKModes.
	                                  Formats.csv           Supported per-device NTV2FrameBufferFormats.
	                                  GetNum.csv            Per-device return values for every "GetNum" function.
	                                  InputSources.csv      Supported per-device NTV2InputSources.
	                                  VideoFormats.csv      Supported per-device NTV2VideoFormats.
	                                  Widgets.csv           Supported per-device NTV2WidgetIDs.
	                              If not specified, no CSV files are written.

	ntv2devicefeatures.py       Older Python script that generated 'ntv2devicefeatures.hh' and 'ntv2devicefeatures.hpp' files
	                            from the several .csv files listed above.

	cando_canon.gen             Text file containing the canonical "CanDo" function names (and optional return value descriptions).

	getnum_canon.gen            Text file containing the canonical "GetNum" function names and return types (and optional
	                            return value descriptions).

	devices                     Folder containing .gen files, one for each supported device.
	                            IMPORTANT:  This folder must contain exactly one .gen file for each unique NTV2DeviceID
	                                        in 'ntv2enums.h'.
	                            IMPORTANT:  Each .gen file's name, when stripped of "dev_" and ".gen" and folded to uppercase,
	                                        must match its corresponding NTV2DeviceID enum name stripped of "DEVICE_ID_".


ADD NEW DEVICE
	1)  In "sdkgen/devices", duplicate the ".gen" file that most closely matches the new device.
	2)  Update each section in the file to match the device capabilities.
	3)  If a canonical name doesn't appear in the file, then the device "cannot do" or "has none" or "doesn't support"
	    that particular feature.
	4)  By convention, "GetNum" functions that return zero are omitted from the file.


ADD NEW "GETNUM" FUNCTION
	1)  In the "getnum_canon.gen" file, add the new function name and its return type (and optional return value
	    description).
	2)  Order doesn't matter -- the script sorts everything.
	3)  Add the function name and return value (in its own line) to each ".gen" file for each device that's supposed
	    to return a non-zero value for the function.


ADD NEW "CANDO" FUNCTION
	1)  In the "cando_canon.gen" file, add the new function name in a new line.
	2)  Order doesn't matter -- the script sorts everything.
	3)  Add the function name (in its own line) to each "dev_XXX.gen" file for each device that supports the
	    new feature.


ADD NEW NTV2FrameBufferFormat
	1)  Add the NTV2_FBF_XXXX enumeration value to the "ntv2enums.h" header.
	2)  Add the NTV2_FBF_XXXX enum value (in its own line) to each ".gen" file for each device that supports the
	    new format.


GENERATING THE SDK
	You must run one of the Python scripts BEFORE compiling or distributing the SDK.

	OLD WAY:
		This method assumes you still want to generate the SDK from CSV files.
		1)  Generate the CSVs using 'ntv2sdkgen.py':
		        $  cd ajalibraries/ajantv2
		        $  ./sdkgen/ntv2sdkgen.py  --csv sdkgen
		    If the script succeeds, the generated CSVs will have replaced any existing ones in the 'sdkgen' folder.
		2)  Generate the .hh and .hpp files from the CSVs using the old script:
		        $  ./sdkgen/ntv2devicefeatures.py   --csv sdkgen   --ohh includes   --ohpp src
		    If the script succeeds, the generated files will have replaced the existing ones.

	NEW WAY:
		This method generates the SDK .hh and .hpp files directly.
		1)  Invoke the new script:
		        $  cd ajalibraries/ajantv2
		        $  ./sdkgen/ntv2sdkgen.py   --ohh includes   --ohpp src
		    If the script succeeds, the .hh and .hpp files will have replaced the existing ones.
		    The SDK is now ready to be built and/or distributed.
