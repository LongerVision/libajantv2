/**
	@file		ntv2rawdngwriter.cpp
	@brief		Implementation if the NTV2RawDNGWriter class.
	@copyright	Copyright (C) 2014 AJA Video Systems, Inc.  All rights reserved.
**/


//	Includes
#include <stdio.h>
#include "ntv2rawdngwriter.h"
#include "ajabase/system/file_io.h"
#include "ajabase/system/systemtime.h"
#if defined(MSWindows) || defined(AJAWindows)
#define snprintf _snprintf
#endif


//	Globals

//	Offsets into the following header for fields that can change
static const uint16_t OFFSET_WIDTH1		 = 0x01E;
static const uint16_t OFFSET_HEIGHT1	 = 0x02A;
static const uint16_t OFFSET_SIZE		 = 0x096;
static const uint16_t OFFSET_WIDTH2		 = 0x1D8;
static const uint16_t OFFSET_HEIGHT2	 = 0x1DC;
static const uint16_t OFFSET_HEIGHT3	 = 0x290;
static const uint16_t OFFSET_WIDTH3		 = 0x294;
static const uint16_t OFFSET_TC			 = 0x298;
static const uint16_t OFFSET_SCALE		 = 0x2A0;
static const uint16_t OFFSET_DURATION	 = 0x2A4;


// This is padded out to 4096(0x1000) so we can used unbuffered i/o to get better performance.
static const uint8_t sDngHeader [0x1000] =
{
    /*000000:*/ 0x49, 0x49, 0x2A, 0x00, 0x08, 0x00, 0x00, 0x00, 0x24, 0x00, 0xFE, 0x00, 0x04, 0x00, 0x01, 0x00, 
    /*000010:*/ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x04, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x0F, 
    /*000020:*/ 0x00, 0x00, 0x01, 0x01, 0x04, 0x00, 0x01, 0x00, 0x00, 0x00, 0x70, 0x08, 0x00, 0x00, 0x02, 0x01, 
    /*000030:*/ 0x03, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x03, 0x01, 0x03, 0x00, 0x01, 0x00, 
    /*000040:*/ 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x06, 0x01, 0x03, 0x00, 0x01, 0x00, 0x00, 0x00, 0x23, 0x80, 
    /*000050:*/ 0x00, 0x00, 0x0A, 0x01, 0x03, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x11, 0x01, 
    /*000060:*/ 0x04, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x12, 0x01, 0x03, 0x00, 0x01, 0x00,
    /*000070:*/ 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x15, 0x01, 0x03, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 
    /*000080:*/ 0x00, 0x00, 0x16, 0x01, 0x04, 0x00, 0x01, 0x00, 0x00, 0x00, 0x70, 0x08, 0x00, 0x00, 0x17, 0x01, 
    /*000090:*/ 0x04, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x34, 0x9E, 0x00, 0x1C, 0x01, 0x03, 0x00, 0x01, 0x00, 
    /*0000A0:*/ 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x8D, 0x82, 0x03, 0x00, 0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 
    /*0000B0:*/ 0x02, 0x00, 0x8E, 0x82, 0x01, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x02, 0x00, 0x01, 0x16, 0x92, 
    /*0000C0:*/ 0x01, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x12, 0xC6, 0x01, 0x00, 0x04, 0x00, 
    /*0000D0:*/ 0x00, 0x00, 0x01, 0x02, 0x00, 0x00, 0x13, 0xC6, 0x01, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x01, 
    /*0000E0:*/ 0x00, 0x00, 0x14, 0xC6, 0x02, 0x00, 0x09, 0x00, 0x00, 0x00, 0xBE, 0x01, 0x00, 0x00, 0x16, 0xC6, 
    /*0000F0:*/ 0x01, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x00, 0x17, 0xC6, 0x03, 0x00, 0x01, 0x00, 
    /*000100:*/ 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x19, 0xC6, 0x03, 0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 
    /*000110:*/ 0x01, 0x00, 0x1A, 0xC6, 0x05, 0x00, 0x01, 0x00, 0x00, 0x00, 0xC8, 0x01, 0x00, 0x00, 0x1D, 0xC6, 
    /*000120:*/ 0x03, 0x00, 0x01, 0x00, 0x00, 0x00, 0xFF, 0x03, 0x00, 0x00, 0x1F, 0xC6, 0x04, 0x00, 0x02, 0x00, 
    /*000130:*/ 0x00, 0x00, 0xD0, 0x01, 0x00, 0x00, 0x20, 0xC6, 0x04, 0x00, 0x02, 0x00, 0x00, 0x00, 0xD8, 0x01, 
    /*000140:*/ 0x00, 0x00, 0x21, 0xC6, 0x0A, 0x00, 0x09, 0x00, 0x00, 0x00, 0xE0, 0x01, 0x00, 0x00, 0x22, 0xC6, 
    /*000150:*/ 0x0A, 0x00, 0x09, 0x00, 0x00, 0x00, 0x28, 0x02, 0x00, 0x00, 0x28, 0xC6, 0x05, 0x00, 0x03, 0x00, 
    /*000160:*/ 0x00, 0x00, 0x70, 0x02, 0x00, 0x00, 0x2D, 0xC6, 0x04, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 
    /*000170:*/ 0x00, 0x00, 0x5A, 0xC6, 0x03, 0x00, 0x01, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00, 0x5B, 0xC6, 
    /*000180:*/ 0x03, 0x00, 0x01, 0x00, 0x00, 0x00, 0x15, 0x00, 0x00, 0x00, 0x8D, 0xC6, 0x04, 0x00, 0x04, 0x00, 
    /*000190:*/ 0x00, 0x00, 0x88, 0x02, 0x00, 0x00, 0xFD, 0xC6, 0x04, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 
    /*0001A0:*/ 0x00, 0x00, 0x63, 0xC7, 0x01, 0x00, 0x08, 0x00, 0x00, 0x00, 0x98, 0x02, 0x00, 0x00, 0x64, 0xC7, 
    /*0001B0:*/ 0x0A, 0x00, 0x01, 0x00, 0x00, 0x00, 0xA0, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x4A, 
    /*0001C0:*/ 0x41, 0x20, 0x43, 0x49, 0x4F, 0x4E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 
    /*0001D0:*/ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x70, 0x08, 0x00, 0x00, 
    /*0001E0:*/ 0x91, 0x2F, 0x00, 0x00, 0x10, 0x27, 0x00, 0x00, 0xFD, 0xED, 0xFF, 0xFF, 0x10, 0x27, 0x00, 0x00, 
    /*0001F0:*/ 0x6B, 0x00, 0x00, 0x00, 0x10, 0x27, 0x00, 0x00, 0xDF, 0xF0, 0xFF, 0xFF, 0x10, 0x27, 0x00, 0x00, 
    /*000200:*/ 0x4C, 0x34, 0x00, 0x00, 0x10, 0x27, 0x00, 0x00, 0xA4, 0x01, 0x00, 0x00, 0x10, 0x27, 0x00, 0x00, 
    /*000210:*/ 0x70, 0x02, 0x00, 0x00, 0x10, 0x27, 0x00, 0x00, 0xDF, 0x07, 0x00, 0x00, 0x10, 0x27, 0x00, 0x00, 
    /*000220:*/ 0x57, 0x1A, 0x00, 0x00, 0x10, 0x27, 0x00, 0x00, 0xBE, 0x4F, 0x00, 0x00, 0x10, 0x27, 0x00, 0x00, 
    /*000230:*/ 0xEF, 0xE9, 0xFF, 0xFF, 0x10, 0x27, 0x00, 0x00, 0x89, 0xF2, 0xFF, 0xFF, 0x10, 0x27, 0x00, 0x00, 
    /*000240:*/ 0x23, 0xDA, 0xFF, 0xFF, 0x10, 0x27, 0x00, 0x00, 0x48, 0x49, 0x00, 0x00, 0x10, 0x27, 0x00, 0x00, 
    /*000250:*/ 0xA0, 0x01, 0x00, 0x00, 0x10, 0x27, 0x00, 0x00, 0x86, 0x00, 0x00, 0x00, 0x10, 0x27, 0x00, 0x00, 
    /*000260:*/ 0x60, 0xFB, 0xFF, 0xFF, 0x10, 0x27, 0x00, 0x00, 0xAA, 0x27, 0x00, 0x00, 0x10, 0x27, 0x00, 0x00, 
    /*000270:*/ 0xCE, 0x0D, 0x10, 0x00, 0x40, 0x42, 0x0F, 0x00, 0x40, 0x42, 0x0F, 0x00, 0x40, 0x42, 0x0F, 0x00, 
    /*000280:*/ 0x91, 0x03, 0x0E, 0x00, 0x40, 0x42, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    /*000290:*/ 0x70, 0x08, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x04, 0x03, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00, 
    /*0002A0:*/ 0xE8, 0x03, 0x00, 0x00, 0x30, 0x75, 0x00, 0x00
};

static uint8_t header [sizeof(sDngHeader)];


NTV2RawDngWriter::NTV2RawDngWriter (AJACircularBuffer <AVDataBuffer *> & circularBuffer) :
	mDuration			(0),
	mFileNameBase		(""),
	mFileNameSequence	(0),
	mIncrementSequence	(true),
	mFrameRate			(NTV2_FRAMERATE_UNKNOWN),
	mRasterWidth		(0),
	mRasterHeight		(0),
	mRecording			(true),
	mScale				(0),
	mCircularBuffer		(circularBuffer)
{
	//	Create a mutable copy of the header so tags can be given different values
	::memcpy ((void*) header, (void*) sDngHeader, sizeof(header));

}	//	constructor


NTV2RawDngWriter::~NTV2RawDngWriter (void)
{
}	//	destructor


bool NTV2RawDngWriter::SetFileNameBase (const std::string fileNameBase)
{
	mFileNameBase = fileNameBase;

	return true;

}	//	SetFIleNameBase


bool NTV2RawDngWriter::SetFileNameSequence (const uint32_t fileNameSequence)
{
	mFileNameSequence = fileNameSequence;

	return true;

}	//	SetFileNameSequence


bool NTV2RawDngWriter::SetIncrementSequence (const bool incrementSequence)
{
	mIncrementSequence = incrementSequence;

	return true;

}	//	SetIncrementSequence


bool NTV2RawDngWriter::SetRecordState (const bool recordState)
{
	mRecording = recordState;

	return true;

}	//	SetIncrementSequence


bool NTV2RawDngWriter::SetFrameRate (const NTV2FrameRate frameRate)
{
	switch (frameRate)
	{
		case NTV2_FRAMERATE_12000:
			mScale		= 120000;
			mDuration	= 1000;
			break;
		case NTV2_FRAMERATE_6000:
			mScale		= 60000;
			mDuration	= 1000;
			break;
		case NTV2_FRAMERATE_3000:
			mScale		= 30000;
			mDuration	= 1000;
			break;
		default:
			return false;
			break;
	}

	mFrameRate = frameRate;
	return true;

}	//	SetFrameRate

bool NTV2RawDngWriter::SetRasterDimensions (const uint32_t width, const uint32_t height)
{
	if ( ((width == 3840) || (width == 4096)) && (height == 2160) )
	{
		mRasterWidth	= width;
		mRasterHeight	= height;

		return true;
	}

	return false;

}	//	SetRasterDimensions


bool NTV2RawDngWriter::ThreadLoop (void)
{
	//	Wait for the next frame to become ready to "consume"...
	AVDataBuffer *	playData	(mCircularBuffer.StartConsumeNextBuffer ());

	if (playData)
	{
		if (!mRecording)
		{
			mCircularBuffer.EndConsumeNextBuffer ();
			return true;
		}

		//	Update the DNG header with the current tag values
		*((uint32_t*)(header + OFFSET_WIDTH1))		= mRasterWidth;
		*((uint32_t*)(header + OFFSET_WIDTH2))		= mRasterWidth;
		*((uint32_t*)(header + OFFSET_WIDTH3))		= mRasterWidth;

		*((uint32_t*)(header + OFFSET_HEIGHT1))		= mRasterHeight;
		*((uint32_t*)(header + OFFSET_HEIGHT2))		= mRasterHeight;
		*((uint32_t*)(header + OFFSET_HEIGHT3))		= mRasterHeight;

		*((uint32_t*)(header + OFFSET_SIZE))		= ((mRasterWidth * mRasterHeight) * 10) / 8;

		*((uint32_t*)(header + OFFSET_SCALE))		= mScale;
		*((uint32_t*)(header + OFFSET_DURATION))	= mDuration;


		*(header + OFFSET_TC + 0) = ((playData->fRP188Data.Low  & RP188_FRAMETENS_MASK)   >>  4) | ((playData->fRP188Data.Low  & RP188_FRAMEUNITS_MASK)   >>  0);
		*(header + OFFSET_TC + 1) = ((playData->fRP188Data.Low  & RP188_SECONDTENS_MASK)  >> 20) | ((playData->fRP188Data.Low  & RP188_SECONDUNITS_MASK)  >> 16);
		*(header + OFFSET_TC + 2) = ((playData->fRP188Data.High & RP188_MINUTESTENS_MASK) >>  4) | ((playData->fRP188Data.High & RP188_MINUTESUNITS_MASK) >>  0);
		*(header + OFFSET_TC + 3) = ((playData->fRP188Data.High & RP188_HOURTENS_MASK)    >> 20) | ((playData->fRP188Data.High & RP188_HOURUNITS_MASK)    >> 16);

		//	Create file name
		std::string fileNameStr = mFileNameBase + "/";
		char sequence [16];
		snprintf (sequence, 11, "%06d.dng", mFileNameSequence);
		fileNameStr += sequence;

		//	Open the DNG output file
		AJAFileIO dngFile;
		if (AJA_STATUS_SUCCESS != dngFile.Open (fileNameStr.c_str (),
												eAJACreateAlways | eAJAWriteOnly,
                                                (int) eAJAUnbuffered))
		{
			printf("Could not open dng file %s\n", fileNameStr.c_str ());
			mRecording = false;
			return true;
		}

		//	Write the header
        uint32_t writeCount = dngFile.Write (header, sizeof(header));
        if (writeCount != sizeof(header))
        {
			printf("Wrote only %d bytes of dng header\n", writeCount);
			mRecording = false;
			return true;
		}

		//	Write the raw frame
		writeCount = dngFile.Write ((uint8_t *)playData->fVideoBuffer, playData->fVideoBufferSize);
		if (writeCount != playData->fVideoBufferSize)
		{
			printf("Wrote only %d bytes of raw frame\n", writeCount);
			mRecording = false;
			return true;
		}

		//	All done
		dngFile.Close ();

		//	Increment file name sequence
		if (mIncrementSequence)
			mFileNameSequence++;

		//	Signal that the frame has been "consumed"...
		mCircularBuffer.EndConsumeNextBuffer ();
	}
	else
	{
		// No image to process yet
		AJATime::Sleep (5);
	}

	return true;

}	//	ThreadLoop

