/**
@page	ntv2encodehevc		NTV2EncodeHEVC Demo

@section	ntv2encodehevc-overview		Overview

The NTV2 encode HEVC application demonstrates capture of live video from an SDI source to a raw HEVC disk file
using the \ref corvidhevc board. Encode HEVC programs the hardware using the NTV2 classes library, including using the new HEVC extensions
to encode video.  The hardware is managed by the NTV2 driver which provides the functions to manage streaming video to the classes library.
 
<b>ntv2encodehevc</b> is a command line application with options to control the NTV2 and HEVC configuration.
While in operation, the NTV2 components can be monitored using the <b>Watcher</b> and <b>Cables</b> applications.
The HEVC codec can be monitored using the NTV2 <b>HEVC Monitor</b> application.


@section	ntv2encodehevc-build		Build and Run

<b>ntv2encodehevc</b> is located in the <tt>demoapps</tt> folder of the NTV2 distribution.
It uses the NTV2EncodeHEVC class from the <tt>democlasses</tt> folder to do the video setup and capture.
The application has standard build files for each supported platform.
The <b>ntv2encodehevc</b> executable is built to the standard "bin" folder.
See the NTV2 SDK installation guide for more platform specific build information.

<b>ntv2encodehevc</b> should be run from the command line.
Without optional parameters it will detect the input format of the SDI input video and if a matching preset is available,
compress it in 8-bit 4:2:0 format.  By default, the codec will be configured in single stream mode.
If the input is UHD, use the <tt>–q</tt> option to indicate that the four SDI inputs should be treated as a single UHD stream.

\code{.sh}
$ ./ntv2encodehevc
Capture: M31_FILE_1280X720_420_8_5994p

           Capture  Capture
   Frames   Frames   Buffer
Processed  Dropped    Level
     3595        0        1

Capture last frame number 3663
Output last frame number 3663
\endcode

The Encode HEVC application can also compress multiple streams of various formats.
Run an instance of the application for each stream and specify the <tt>–c[1-4]</tt> option to indicate which stream to configure.
For instance, <tt>$ ./ntv2encodehevc –c3</tt> configures the codec to compress using stream 3.

The format of the encoded stream can be set using the <b>–f</b> option.
Use the <b>–lf</b> option to list the supported formats.

\code{.sh}
$ ./ntv2encodehevc –lf
M31 Formats
0:  8 Bit YCbCr 420 Planar
1:  10 Bit YCbCr 420 Planar
2:  8 Bit YCbCr 422 Planar
3:  10 Bit YCbCr 422 Planar
\endcode

The codec preset used to encode the stream can be set using the <b>–p</b> option.
Use the <b>–lp</b> option to list the supported presets.  This option will override the automatic stream format detection.

\code{.sh}
$ ./ntv2encodehevc -lp
M31 Presets
0:  FILE 1280x720 420 Planar 8 Bit 50p
1:  FILE 1280x720 420 Planar 8 Bit 59.94p
2:  FILE 1280x720 422 Planar 10 Bit 50p
3:  FILE 1280x720 422 Planar 10 Bit 59.94p
4:  FILE 1920x1080 420 Planar 8 Bit 50p
5:  FILE 1920x1080 420 Planar 8 Bit 59.94p
6:  FILE 1920x1080 422 Planar 10 Bit 50p
7:  FILE 1920x1080 422 Planar 10 Bit 59.94p
8:  FILE 3840x2160 420 Planar 8 Bit 50p
9:  FILE 3840x2160 420 Planar 8 Bit 59.94p
10:  FILE 3840x2160 420 Planar 10 Bit 50p
11:  FILE 3840x2160 420 Planar 10 Bit 59.94p
12:  FILE 3840x2160 422 Planar 8 Bit 50p
13:  FILE 3840x2160 422 Planar 8 Bit 59.94p
14:  FILE 3840x2160 422 Planar 10 Bit 50p
15:  FILE 3840x2160 422 Planar 10 Bit 59.94p
\endcode

The Encode HEVC application can output audio capture from the SDI input stream in the file <tt>raw.aiff</tt> by specifying the <tt>–a[1-16]</tt>
option.  The file format is 16-bit 48 kHz PCM with 1-16 channels.

The HEVC codec supports picture data added to the HEVC stream.  Use the <b>–i</b> option to activate this feature.
The data contains a sequence identifier, presentation time and optional data that can include supplemental enhancement information (SEI).
The codec also outputs stream information that contains the picture sequence identifier, presentation time, etc.
The stream information for each frame is written to the <tt>raw.txt</tt> file.

The <b>–t</b> option adds two timecode burns to the video.  The top burn is based on the count of frames compressed.
The bottom burn is the SMPTE-12 (RP-188) timecode from the SDI stream.

Encode HEVC captures the SDI video input, encode it as HEVC and writes the file <tt>raw.hevc</tt> to the default directory.
If the codec is configured for multistream compression, the file will be <tt>raw_1.hevc</tt>, <tt>raw_2.hevc</tt>, etc.
To stop the capture type Ctrl-c.  The <tt>raw.hevc</tt> file can be viewed using <b>ffplay</b> (install from the internet).
For HD video use:

\code{.sh}
$ ffplay raw.hevc
\endcode

For UHD streams, the video display can be scaled using:

\code{.sh}
$ ffplay –vf “scale=1920:1080” raw.hevc
\endcode

HEVC playback is a CPU intensive process and may not run in real-time.  Use the s-key during <b>ffplay</b> to enter single frame mode.
The space-key resumes normal playback.


@section	ntv2encodehevc-design		Design

<b>ntv2encodehevc</b> captures uncompressed video from the SDI input and writes an HEVC compressed file.
The current data flow captures the uncompressed video to system memory to allow video processing by the application before being HEVC encoded.

@image	html	hevcdataflow-75.png

The Encode HEVC application configures the video FPGA and HEVC codec based on the specified codec preset.
This determines the NTV2 video format and the frame buffer format used to capture the video.
It also determines the raster and pixel format expected by the codec.
The preset also configures the characteristics of the video compression.
Code could be added to modify these codec parameters before processing starts to change bit rates, etc.

@section	ntv2encodehevc-threads		Thread Model

Encode HEVC uses a simple threading model to move the captured SDI video from the NTV2 frame buffer to system buffers,
the HEVC codec, and finally the output file.  The threads move data to and from the HEVC board using DMA.

The video input thread uses CNTV2Card::TransferWithAutoCirculate to move each captured video frame from the FPGA
frame buffer to the video input system memory ring.

The video process thread represents some arbitrary video processing controlled by the application.
This could involve CPU, GPU, etc. processing, and for this application produces a result in the same video and pixel format as the original.
The example currently does a simple data copy of each video frame from the video input ring to the video raw ring.

The codec raw thread uses NTV2 RawTransfer to move each raw video frame from the video raw ring to the hardware codec where the video is compressed.

The codec HEVC thread uses NTV2 EncTransfer() to move each compressed video frame from the hardware codec to the video HEVC ring.

The file writer thread uses standard C library file functions to write each compressed video frame from the video HEVC ring to the
<tt>raw.hevc</tt> output file.


@section	ntv2encodehevc-startupshutdown		Startup and Shutdown

<b>ntv2encodehevc</b> configures the HEVC codec to run in asynchronous mode.  This makes stream startup simple, as the codec waits
for data to begin compression.  However the codec is particular about how it is shutdown to avoid an error state.  This is not as
important when encoding a single stream, since the codec can be reset between shutdown and subsequent startups.  However this will
not be possible when encoding multiple streams that do not all start and stop at the same time.

The current model used to stop the codec is to mark the last frame to be encoded, and have each thread monitor its progress through the pipeline.
After processing the last frame, each thread discontinues further frame processing and the pipeline starves.  So far, it does not
appear that the codec requires raw frames to the flush the encoded data after the last frame has been received.  Once the last HEVC
frame has been transferred from the codec, it can be moved cleanly to the stop state.


@section	ntv2encodehevc-futuredev		Future Development

The first version of the <b>ntv2encodehevc</b> demonstrates encoding of a single video stream in various HD and UHD formats and
pixel resolutions.  Future work could include:
-	More tested formats such as NTSC, PAL, 1080i...
-	More tested frame rates
-	Audio and ancillary data
-	Multistream (running multiple copies of the application)
-	Support for encoding from the codec SDI interface (vif)
-	HEVC parameter settings
-	Non-SDI rasters

Multistream would demonstrate independent control of codec streams.  Using the codec SDI inputs would support the current data
flow model and also allow the pixel format of the system-based video processing to be different than the encoded pixel format.
HEVC parameter changes would include setting the desired HEVC data rate.
**/
