/**
	@page	audiooperation		Audio System Operation

	NTV2-compatible devices have a minimum of one <b>Audio System</b> (sometimes referred to as an Audio Engine).
	Call ::NTV2DeviceGetNumAudioSystems to determine the number of Audio Systems on a device.

	Each Audio System can accommodate at least 8 channels of audio.
	Call ::NTV2DeviceGetMaxAudioChannels to determine the maximum number of audio channels that a device's Audio System(s) can handle.
	Call CNTV2Card::GetNumberAudioChannels to determine how many audio channels a device Audio System is currently configured for.
	Modern AJA devices will accommodate up to 16 channels. Older AJA devices defaulted to 6 channels at power-up -- these should be
	configured to use 8 channels.
	Call CNTV2Card::SetNumberAudioChannels to change the number of audio channels a device Audio System is configured to use.

	@note	It is recommended that the Audio System be configured to use the maximum number of audio channels the device is capable of.

	The audio sample rate on all AJA devices is fixed at 48 kHz.

	Each Audio System uses an 8 MB contiguous block of SDRAM in the last video frame buffer(s) to store its audio data. The first and last 4 MB
	of that chunk is used for <b>Audio Output</b> and <b>Audio Input</b>, respectively. Each Output or Input aspect of the Audio System operate
	independently, each being in one of two states: <b>Running</b> or <b>Stopped</b> (aka the "Reset" state). When the Input or Output of the
	Audio System is Running, eight or sixteen channels (see CNTV2Card::GetNumberAudioChannels) of audio are always written/read to/from this
	memory, regardless of whether all 8 or 16 channels are used.

	On newer AJA devices, the last byte of the first Audio System's input buffer coincides with the last addressable byte of device SDRAM
	(and subsequent Audio System buffers stack backward from there, 8MB per Audio System). On older devices, the first byte of the last
	Audio System's output buffer coincides with the first byte of the last frame buffer in device memory (and previous Audio System buffers,
	if any, start at previous video frame buffers).

	@image	html	hwref-fig2-audiobuffers.png

	See \ref audioformats for a detailed look at the format of the audio data in the buffer.


	@section	audiocapture		Audio Capture

	Incoming audio is de-embedded from incoming audio HANC packets (SMPTE 299M for HD, SMPTE 272M for SD).
	For HD, each audio sample consists of 24 bits of sample data (normally PCM).
	For SD, each audio sample consists of 20 bits of sample data (normally PCM) -- audio extended packets are ignored.

	When the Audio System is running, each 24-bit sample is copied as-is into the most-significant 3 bytes of each 4-byte sample word
	in the Audio Input Buffer in device memory at the address specified by the Audio System's Audio Input Last Address register (i.e.,
	the <b>Record Head</b> or "write head"). Call CNTV2Card::ReadAudioLastIn to get the current Record Head position. Audio data continues to
	be written into the input buffer until filled, whereupon the Record Head wraps back to the start of the buffer, where writing continues.
	The least-significant byte of each 32-bit sample word in the Audio Input Buffer is always set to zero. (Note that for SD, because
	extended packets are ignored, an extra 4-bit nibble in each 32-bit sample word will also be zero.)

	@image	html	hwref-fig3-audiorecordplay.png

	Audio data can be transferred from the Audio Input Buffer in device memory to a host audio buffer via DMA by calling CNTV2Card::DMAReadAudio.
	While the offset to the Input portion of the device Audio Buffer is typically fixed at 4 MB, to be absolutely safe should this ever change,
	call CNTV2Card::GetAudioReadOffset to obtain the actual offset being used by the driver and SDK.

	Note that if AutoCirculate is used for capture, AutoCirculate completely and automatically manages the Audio System.
	See \ref aboutautocirculate for more information.

	If the Embedded Audio Group packet (containing two audio channel pairs) is not present in the data stream, its samples in the buffer
	will be set to zero (silence). The firmware notes which audio group packets are present and which are missing, and coalesces this
	information into a hardware register. Client software can query this information by calling CNTV2Card::GetDetectedAudioChannelPairs.

	Upstream equipment may indicate one or more audio channel pairs is not carrying PCM data (e.g., Dolby-E) via certain bits in the AES
	header in the audio stream. On newer AJA devices (see ::NTV2DeviceCanDoPCMDetection), the Audio System's de-embedder makes this
	information available in a hardware register, and client software can query it by calling CNTV2Card::GetInputAudioChannelPairsWithoutPCM
	or CNTV2Card::InputAudioChannelPairHasPCM.

	Generally, each Audio System's <b>Input Source</b> is selectable, to receive samples from any of the device's video (and possibly audio)
	Input Sources, including embedded SDI, HDMI, external AES and analog inputs (see CNTV2Card::SetAudioSystemInputSource).
	For devices that support 3Gb Level B inputs, the audio can be taken from data stream 1 or 2.


	@section	audioplayout		Audio Playout

	If the device supports SDI playout, each Audio System has an output embedder that generates audio packets (per SMPTE 299M for HD
	and SMPTE 272M for SD) and inserts them into the HANC area of the outgoing SDI data stream.
	Audio channels 1 & 2 are transmitted on Embedded Group 1, channels 1 & 2.
	Audio channels 3 & 4 are transmitted on Embedded Group 1, channels 3 & 4.
	Audio channels 5 & 6 are transmitted on Embedded Group 2, channels 1 & 2.
	Audio channels 7 & 8 are transmitted on Embedded Group 2, channels 3 & 4.
	In 16-channel mode (see CNTV2Card::GetNumberAudioChannels), the remaining 8 channels are distributed in Embedded Groups 3 and 4
	in a similar fashion.
	There is currently no provision for enabling or disabling specific audio groups.

	The output embedder always inserts audio packets unless it's been disabled (see CNTV2Card::SetAudioOutputEmbedderState).

	When the Audio System is stopped, the output embedder will either embed silence (zeroes) into the data stream, or, if <b>Loopback Mode</b>
	is enabled, it will embed audio samples obtained (through a FIFO) from its input de-embedder (see CNTV2Card::SetAudioLoopBack).

	When the Audio System is running, each 24-bit audio sample is copied from the most-significant 3 bytes of each 32-bit longword
	in the device audio buffer (the least-significant byte is ignored). Note, however, for SD, only the most-significant 20 bits are
	used (since the embedder does not create extended audio packets).

	During playout, the output embedder pulls audio samples from the Audio Output Buffer in device memory at the address specified by the
	Audio System's Audio Output Last Address register (i.e., the <b>Play Head</b> or "read head"). Call CNTV2Card::ReadAudioLastOut to get the
	current Play Head position. Audio data continues to be read from the output buffer until the end is reached, whereupon the Play Head wraps
	back to the start of the buffer, where reading continues.

	The playout engine has an optional <b>Erase Mode</b>, in which it will automatically clear (zero) the Output Buffer memory immediately behind
	the Play Head as it runs. If the host application fails to transfer new samples into the Audio Output Buffer, the buffer will eventually
	contain all zeroes, and the output embedder will thereafter only transmit silence. Use the CNTV2Card::SetAudioOutputEraseMode function
	to configure this feature.

	Audio data can be transferred from the host to the device audio buffer via DMA by calling CNTV2Card::DMAWriteAudio. The last address
	written into the Audio Output Buffer (via DMA) is latched and available for readback at "Audio Output Last Address" (within 256 bytes).
	If the output hardware "Play Head" pointer catches up to the Audio Output Last Address, the buffer will wrap, and audio/video
	synchronization will be lost.

	Note that if AutoCirculate is used for playout, AutoCirculate completely and automatically manages the Audio System.
	See \ref aboutautocirculate for more information.

	SDI output embedders can usually be driven by any Audio System (see CNTV2Card::SetSDIOutputAudioSystem and CNTV2Card::SetSDIOutputDS2AudioSystem).

	Downstream equipment can be told that the outgoing audio is not carrying PCM data, by setting the non-PCM indicator in the AES header.
	Older AJA devices can only do this on an audio-system-wide basis -- i.e., all outgoing audio groups are marked PCM or non-PCM.
	Use the simpler form of the CNTV2Card::SetAudioPCMControl function for these devices.

	Newer AJA devices can mark individual audio channel pairs as non-PCM (the ::NTV2DeviceCanDoPCMControl function returns true for
	devices that support this capability). Use one of the overloaded versions of CNTV2Card::SetAudioPCMControl that accepts either a
	single NTV2AudioChannelPair or an NTV2AudioChannelPairs set.


	@section	audiomixer		Audio Mixer

	Some newer NTV2 devices have firmware that implements a three-multichannel-input <b>Audio Mixer</b>.
	To determine if a device can support this feature, call ::NTV2DeviceCanDoAudioMixer.
	To determine if the device actually has this feature in its running firmware, call CNTV2Card::DeviceCanDoAudioMixer.

	The mixer supports three multichannel input sources:
	-	<b>Main</b> (primary) input (all audio channels);
	-	<b>Auxiliary 1</b> input (2 audio channels only);
	-	<b>Auxiliary 2</b> input (2 audio channels only).

	Each of the three mixer inputs can be sourced from the output of any audio engine on the device by making these calls:
	-	CNTV2Card::SetAudioMixerMainInputAudioSystem (all audio channels)
	-	CNTV2Card::SetAudioMixerAux1x2chInputAudioSystem (two audio channels only)
	-	CNTV2Card::SetAudioMixerAux2x2chInputAudioSystem (two audio channels only)

	Any of the mixer inputs can be disabled (muted) or enabled (unmuted) by making these calls:
	-	CNTV2Card::SetAudioMixerMainInputEnable
	-	CNTV2Card::SetAudioMixerAux1InputEnable
	-	CNTV2Card::SetAudioMixerAux2InputEnable

	Each mixer input has a separate gain control that's controlled from these functions:
	-	CNTV2Card::SetAudioMixerMainInputGain
	-	CNTV2Card::SetAudioMixerAux1InputGain
	-	CNTV2Card::SetAudioMixerAux2InputGain
**/
