/**
@page	demoapps

@section	ntv2ccplayer		NTV2CCPlayer Demo

This command-line program reads text either from the standard input stream or from a built-in test document stream,
and encodes that text into CEA-608 captions that are embedded into an outgoing SDI signal.

@image	html	ntv2ccplayer.png

The NTV2CCPlayer class demonstrates…
- how to generate a test pattern of a particular video geometry and get it into a frame buffer with the right format;
- how to use the CNTV2CaptionEncoder608 and CNTV2CaptionEncoder708 classes to encode caption data into SD and HD video frames;
- how to use the custom ancillary data insertion feature of newer AJA devices (if available);
- how to properly acquire and release an AJA device in order to use it exclusively;
- how to use the new AutoCirculate APIs to efficiently play video.

<h2>Command Line Syntax</h2>

<tt>ntv2ccplayer \[OPTION \[...\]\] \[FILEPATH \[...\]\] </tt>

Plays video containing closed-caption data sourced from...
-	the contents of one or more files specified as path arguments on the command line,
-	standard input (if "-" used as a file argument),
-	an internal plaintext source (if no file arguments provided).

...where...
@code
	OPTION                                   DESCRIPTION

	-d index#, serial#, or model             Specifies the device to use.
	--device=index#, serial#, or model       Defaults to first device found.

	-c 1..8                                  Specifies the channel/frameStore to use.
	--channel=1..8                           Defaults to channel 1.

	-f formatSpec                            Specifies the video format to produce.
	--format=formatSpec                      Defaults to 1080i5994.
	                                         Specify 'list' or '?' to display the valid video formats for the device.

	--rgb                                    Configure to emit dual-link RGB over SDI.

	--square                                 For 4K/UHD formats, configure for “squares” (quadrants) instead of the
	                                         TSI default (two-sample interleave).

	-p formatSpec                            FrameStore pixel format to use.
	--pixelFormat=formatSpec                 Defaults to v210 (10-bit YCbCr).
	                                         Specify 'list' or '?' to display the valid pixel formats for the device.

	--noaudio                                Don't generate/embed audio tone.

	--notimecode                             Don't generate/embed timecode.

	-m|--multiChannel                        Enables multiformat mode, and tries to share the device with other processes.

	-s, --stats                              Emits statistics to stdout.
	                                         By default, ntv2ccplayer emits caption text to stdout.

	-v, --vanc                               Uses a (tall) VANC frame geometry for the frame buffer.
	                                         By default, ntv2ccplayer uses normal frame geometry.
	
	--frames {spec}                          Optionally specifies device frame buffers to use, where {spec} is:
	                                             numFrames[@startFrame]    Specifies frame count (and optional start frame):
	                                                                       e.g.      7      -- First free 7 frames
	                                                                       e.g.      7@5    -- 7 frames starting at frame 5
	                                             startFrame-endFrame       Explicitly specifies start and end frame numbers:
	                                                                       e.g.      0-6    -- frames 0 thru 6 (inclusive)
	                                         Defaults to the lowest-numbered unused 7 frames.

	-n, --noline21                           Don't encode/embed "analog" caption data into line 21 (SD only).
	                                         By default, for SD output, ntv2ccplayer will encode "analog" CC data into line 21.

	--no608                                  Don't transmit CEA608 anc data packet(s).
	                                         By default, ntv2ccplayer will transmit CEA608 anc data packets.

	--no708                                  Don't transmit CEA608 anc data packet(s).
	                                         By default, ntv2ccplayer will not transmit CEA708 anc packets for SD video,
	                                         but will transmit CEA708 packets for HD video.

	--608chan=chanSpec[,...]                 Specifies the CEA608 caption channel to use.
	                                         Legal values:   CC1 | cc1      Caption channel 1 (default).
	                                                         CC2 | cc2      Caption channel 2.
	                                                         CC3 | cc3      Caption channel 3.
	                                                         CC4 | cc4      Caption channel 4.
	                                                         TX1 | tx1      Text channel 1.
	                                                         TX2 | tx2      Text channel 2.
	                                                         TX3 | tx3      Text channel 3.
	                                                         TX4 | tx4      Text channel 4.

	-e exit|loop|idle[,...]                  Specifies what happens when the last specified text file's contents have been queued for playout.
	--end=exit|loop|idle[,...]               Legal values:   exit     Terminates ntv2ccplayer after all text files have played. (Default)
	                                                         loop     Replay the caption text file(s) forever.
	                                                         idle     Continue to play frames indefinitely, but without captions.

	-r number[,...]                          Specifies the rate at which caption text is produced, in characters per minute.
	--rate=number[,...]                      Defaults to 500 characters per minute.

	--608mode=modeSpec[,...]                 Specifies the CEA608 caption mode to use.
	                                         Legal values:   roll|roll4     4-line roll-up, the default
	                                                         roll3          3-line roll-up
	                                                         roll2          2-line roll-up
	                                                         paint          paint-on captions
	                                                         pop            pop-on captions

	--newline                                Specifies that newline characters (CR, LF, CR/LF) in the text files will start new caption rows.
	                                         By default, CR, LF, CR/LF is treated as ordinary whitespace.
@endcode

@note	Multiple CEA608 caption channels can be streamed simultaneously by specifying more than one channel
		in the <tt>--608mode</tt> parameter. Use a comma between each one (no spaces), and don’t specify the
		same channel more than once. For example, to stream “fileA” into caption channel CC1 and “fileB” into
		CC3, with different rates and modes, use <tt>ntv2ccplayer  --stats  --608chan=cc1,cc3  --608mode=roll3,pop  --rate=800,1200  fileA  fileB </tt>.

@note	File data is assumed to be plaintext, unless the file name has a “.scc” or “.SCC” extension and
		contains SCC caption data. SCC playout ignores the <tt>--rate</tt> and <tt>--608mode</tt> settings.
		The default or specified <tt>--608chan</tt> may or may not be correct for the SCC file’s data.


Changes in SDK 16.0
-	Support for 2Kx1080 playout;
-	Support for Dual-Link RGB-over-SDI playout;
-	Support for Low Frame Rate (LFR) 4K/UHD (Tsi & “squares”) playout.

The NTV2CCPlayer class used in the demo app is capable of simultaneously generating and injecting captions
into more than one NTV2Line21Channel at independent rates and NTV2Line21Modes. For example, in "main.cpp"...

@code{.cpp}
	//
	//	NOTE:	This is an example of how to inject different captions into separate caption channels.
	//
	playerConfig.fChannelGenerators.clear ();

	generatorConfig.fFilesToPlay.clear ();
	generatorConfig.fFilesToPlay.push_back (string ("path/to/caption_channel_1_file.txt"));
	generatorConfig.fEndAction			= AtEndAction_Idle;
	generatorConfig.fCaptionMode		= NTV2_CC608_CapModeRollUp2;
	generatorConfig.fCaptionChannel		= NTV2_CC608_CC1;
	generatorConfig.fNewLinesAreNewRows	= true;
	generatorConfig.fCharsPerMinute		= 1000;
	playerConfig.fChannelGenerators [generatorConfig.fCaptionChannel] = generatorConfig;

	generatorConfig.fFilesToPlay.clear ();
	generatorConfig.fFilesToPlay.push_back (string ("path/to/caption_channel_2_file.txt"));
	generatorConfig.fEndAction			= AtEndAction_Repeat;
	generatorConfig.fCaptionMode		= NTV2_CC608_CapModeRollUp3;
	generatorConfig.fCaptionChannel		= NTV2_CC608_CC2;
	generatorConfig.fNewLinesAreNewRows	= true;
	generatorConfig.fCharsPerMinute		= 700;
	playerConfig.fChannelGenerators [generatorConfig.fCaptionChannel] = generatorConfig;

	generatorConfig.fFilesToPlay.clear ();
	generatorConfig.fFilesToPlay.push_back (string ("path/to/caption_channel_3_file.txt"));
	generatorConfig.fEndAction			= AtEndAction_Idle;
	generatorConfig.fCaptionMode		= NTV2_CC608_CapModeRollUp4;
	generatorConfig.fCaptionChannel		= NTV2_CC608_CC3;
	generatorConfig.fNewLinesAreNewRows	= true;
	generatorConfig.fCharsPerMinute		= 500;
	playerConfig.fChannelGenerators [generatorConfig.fCaptionChannel] = generatorConfig;

	generatorConfig.fFilesToPlay.clear ();
	generatorConfig.fFilesToPlay.push_back (string ("path/to/caption_channel_4_file.txt"));
	generatorConfig.fEndAction			= AtEndAction_Repeat;
	generatorConfig.fCaptionMode		= NTV2_CC608_CapModeRollUp4;
	generatorConfig.fCaptionChannel		= NTV2_CC608_CC4;
	generatorConfig.fNewLinesAreNewRows	= true;
	generatorConfig.fCharsPerMinute		= 300;
	playerConfig.fChannelGenerators [generatorConfig.fCaptionChannel] = generatorConfig;

	generatorConfig.fFilesToPlay.clear ();
	generatorConfig.fFilesToPlay.push_back (string ("path/to/caption_channel_text1_file.txt"));
	generatorConfig.fEndAction			= AtEndAction_Idle;
	generatorConfig.fCaptionMode		= NTV2_CC608_CapModeUnknown;
	generatorConfig.fCaptionChannel		= NTV2_CC608_Text1;
	generatorConfig.fNewLinesAreNewRows	= true;
	generatorConfig.fCharsPerMinute		= 200;
	playerConfig.fChannelGenerators [generatorConfig.fCaptionChannel] = generatorConfig;

	generatorConfig.fFilesToPlay.clear ();
	generatorConfig.fFilesToPlay.push_back (string ("path/to/caption_channel_text2_file.txt"));
	generatorConfig.fEndAction			= AtEndAction_Repeat;
	generatorConfig.fCaptionMode		= NTV2_CC608_CapModeUnknown;
	generatorConfig.fCaptionChannel		= NTV2_CC608_Text2;
	generatorConfig.fNewLinesAreNewRows	= true;
	generatorConfig.fCharsPerMinute		= 200;
	playerConfig.fChannelGenerators [generatorConfig.fCaptionChannel] = generatorConfig;

	generatorConfig.fFilesToPlay.clear ();
	generatorConfig.fFilesToPlay.push_back (string ("path/to/caption_channel_text3_file.txt"));
	generatorConfig.fEndAction			= AtEndAction_Idle;
	generatorConfig.fCaptionMode		= NTV2_CC608_CapModeUnknown;
	generatorConfig.fCaptionChannel		= NTV2_CC608_Text3;
	generatorConfig.fNewLinesAreNewRows	= true;
	generatorConfig.fCharsPerMinute		= 200;
	playerConfig.fChannelGenerators [generatorConfig.fCaptionChannel] = generatorConfig;

	generatorConfig.fFilesToPlay.clear ();
	generatorConfig.fFilesToPlay.push_back (string ("path/to/caption_channel_text4_file.txt"));
	generatorConfig.fEndAction			= AtEndAction_Repeat;
	generatorConfig.fCaptionMode		= NTV2_CC608_CapModeUnknown;
	generatorConfig.fCaptionChannel		= NTV2_CC608_Text4;
	generatorConfig.fNewLinesAreNewRows	= true;
	generatorConfig.fCharsPerMinute		= 200;
	playerConfig.fChannelGenerators [generatorConfig.fCaptionChannel] = generatorConfig;
@endcode
**/
