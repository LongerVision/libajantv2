/**
@page	demoapps

@section	ntv2player		NTV2Player Demo

This command-line program plays out a repeating sequence of test patterns and audio tones with realtime timecode “burned”
into the video.

@image	html	ntv2player.png

This is a typical WFM display showing the output of an AJA device that's connected to a host running <b>ntv2player</b>.
Note the timecode “burned” into the video test pattern and 8 channels of audio tone.

The NTV2Player class demonstrates…
-	how to generate a test pattern of a particular video geometry and get it into a frame buffer with the right format;
-	how to generate timecode and “burn” it into a video frame buffer;
-	how to embed timecode into an AJA deviceʼs SDI output signal;
-	how to generate a buffer of audio, and embed it into an AJA deviceʼs output signal;
-	how to properly acquire and release an AJA device in order to use it exclusively;
-	how to use \ref aboutautocirculate to efficiently stream video and audio;
-	how to use an AJACircularBuffer and the producer/consumer model with AutoCirculate.

<b>Command line usage:</b>
@code
	ntv2player  [options...]
	
	-d|--device {spec}              Specifies the device to use by index number, serial number or generic model name.
	                                Defaults to first device (index 0).
	                                If model name specified, uses lowest-numbered matching device.

	-c|--channel {channelNum}       Specifies the framestore/channel as an unsigned integer number 1 thru 8.

	-v|--videoFormat {vidFormat}    Specifies the video format to use. Use '?' or 'list' to list available formats.

	-p|--pixelFormat {pixFormat}    Specifies the pixel format to use. Use '?' or 'list' to list available formats.

	-a|--anc {filePath}             Optionally injects ancillary data as read from the specified binary data file.
	                                These files can be recorded using ntv2capture‘s ‘--ancʼ option.

	-t|--hdrType {hdrSpec}          If specified and non-zero, emits HDR anc packets, where 1=SDR 2=HDR10 3=HLG.

	-m|--multiChannel               Enables multiformat mode, and tries to share the device with other processes.

	--noaudio                       Omits audio.

	--frames {spec}                 Optionally specifies device frame buffers to use, where {spec} is:
	                                    numFrames[@startFrame]    Specifies frame count (and optional start frame):
	                                                              e.g.      7      -- First free 7 frames
	                                                              e.g.      7@5    -- 7 frames starting at frame 5
	                                    startFrame-endFrame       Explicitly specifies start and end frame numbers:
	                                                              e.g.      0-6    -- frames 0 thru 6 (inclusive)
	                                Defaults to the lowest-numbered unused 7 frames.

	-l|--ltc                        Transmit LTC instead of VITC.

	-?|--help|--usage               Shows how to use this command.
@endcode

@subsection		ntv2playeranc	Ancillary Data Injection

The “--anc” command-line option allows a path to a binary data file to be specified, whose contents will be used to
fill NTV2Playerʼs ancillary data buffers during \ref autocirculateplayout.

NTV2Player::PlayFrames simply reads a fixed-size chunk of data (8K by default) into the anc buffer of the
AUTOCIRCULATE_TRANSFER object. If playing interlaced video, then another chunk of data is read from the file into
the “field 2” ancillary data buffer. This all happens before CNTV2Card::AutoCirculateTransfer gets called, at which
time it all gets transferred to the device (via DMA).

The packet data in each per-field chunk in the file (typically 8K) is expected to be in the \ref ancgumpformat.
For \ref konaip or \ref ioip devices running ST-2110 firmware, the data can also be in the \ref ancrtpformat, and
CNTV2Card::AutoCirculateTransfer will automatically convert the data into RTP if needed before transferring to the
hardware.

In the binary data file, packet data is expected to start at the front of each chunk, and subsequent bytes in the
chunk should be zero.

@note	If the per-field Anc buffer region size differs from the data fileʼs per-field chunk size, then
		ancillary data injection wonʼt work. The size of the Anc buffer region is controlled by the driver,
		and can be queried using CNTV2Card::GetAncRegionOffsetAndSize or changed using CNTV2Card::AncSetFrameBufferSize.

**/
