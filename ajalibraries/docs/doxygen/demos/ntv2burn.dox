/**
@page	demoapps

@section	ntv2burn		NTV2Burn Demo

This command-line program captures video provided to the input of an AJA device, “burns” timecode into the video,
then plays it out onto an output of that same AJA device. The program will use the timecode embedded in the input signal
if it has any; otherwise it “invents” its own timecode. It also embeds whatever timecode it used into the output signal.

@image	html	ntv2burn.png

The picture shows a typical WFM display showing the output of an AJA device connected to a host running NTV2Burn.
Note the timecode “burned” into the video and embedded in the output signal.

The NTV2Burn class demonstrates…
- how to properly acquire and release an AJA device in order to use it exclusively;
- how to programmatically perform device configuration and signal routing;
- how to use AutoCirculate to efficiently stream video and audio, with or without timecode.
- how to use an AJACircularBuffer and the producer/consumer model with AutoCirculate;
- how to use and manipulate timecode;
- how to “burn” timecode into a buffer containing a frame of video data.

<b>Command line usage:</b>
@code
	ntv2burn  [options...]
	
	-d|--device	{spec}          Specifies the device to use by index number, serial number or generic model name.
	                            Defaults to first device (index 0).
	                            If model name specified, uses lowest-numbered matching device.
	-i|--input	{inputSource}   Specifies the video source. Use '?' or 'list' to list available sources.
	-t|--tcsource {tcSource}    Specifies the timecode source. Use '?' or 'list' to list available sources.
	-p|--pixelFormat {spec}     Specifies the pixel format to use. Use '?' or 'list' to list available formats.
	-m|--multiChannel           Enables multichannel/multiformat mode, and shares the device with other processes.
	--noanc                     Disables anc capture/playout using device anc inserter/extractor firmware.
	--noaudio                   Disables audio capture/playout.
	--novideo                   Disables video capture/playout.
	--iframes {spec}            Optionally specifies device input frame buffers to use, where {spec} is:
	                                numFrames[@startFrame]    Specifies frame count (and optional start frame):
	                                                          e.g.      7      -- First free 7 frames
	                                                          e.g.      7@5    -- 7 frames starting at frame 5
	                                startFrame-endFrame       Explicitly specifies start and end frame numbers:
	                                                          e.g.      0-6    -- frames 0 thru 6 (inclusive)
	                            Defaults to the lowest-numbered unused 7 frames.
	--oframes {spec}            Optionally specifies device output frame buffers to use. (See above {spec} description.)
	-?|--help|--usage           Shows how to use this command.
@endcode

**/
