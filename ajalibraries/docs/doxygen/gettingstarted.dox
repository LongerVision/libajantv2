/**
@page		gettingstarted		Getting Started

@section	gs-downloadinstallsdk	Downloading and Installing the SDK

@note	Only registered OEMs who have agreed to the AJA OEM Developer agreement are authorized to download and use the NTV2 SDK.

Registered OEMs are given login credentials to access AJA’s SDK support site, which can be securely accessed using any modern
web browser at <https://sdksupport.aja.com/>.

-#	Log in to the <a href="https://sdksupport.aja.com/">SDK support site</a> using the credentials that were provided by AJA.
-#	Go to the <a href="https://sdksupport.aja.com/index.php?/Knowledgebase/List/Index/4">NTV2 SDK Downloads</a> article in
	the <a href="https://sdksupport.aja.com/index.php?/Knowledgebase/List">Knowledgebase</a>.
-#	SDK downloads are organized into “Current” and “Legacy” categories on a per-platform basis (Mac, Windows and Linux).
-#	Under the “Current” SDK category for a given platform, there will be one release version listed.
	There may also be a “beta” version available, which should be considered experimental and not for use in software that is released to end-users.
-#	Click on the article title that corresponds to the desired SDK version.
-#	Read the notes associated with the release.
-#	Near the page bottom, click on the <b>.zip</b> file appropriate to your development platform to start the download.
-#	When finished, it can be unzipped (expanded) into a folder, which can then be renamed and/or moved as needed.

@image	html	sdkdownloadpage-75.png

@note	On MacOS, if the .zip file was downloaded using a web browser, it will have a “quarantine” attribute.
		AJA recommends clearing this attribute prior to unzipping, to avoid quarantining the unzipped SDK,
		which may interfere with your development. To remove the quarantine attributes, enter this command in a Terminal window:
		<tt>xattr -c ~/Downloads/ntv2sdk*.zip</tt>


The SDK’s complete documentation set is available online. The documentation link is on the download page.
The URLs are typically of this form:
-	<b>Release SDKs:</b>   <tt>https://sdksupport.aja.com/docs/NTV2SDK_docs_x_y_z/</tt>
-	<b>Beta SDKs:</b>      <tt>https://sdksupport.aja.com/docs/NTV2SDK_docs_x_y_z_beta/</tt>
...where <tt>x</tt>, <tt>y</tt> and <tt>z</tt> are the SDK’s major, minor and point version numbers, respectively.
The documentation is fully cross-referenced, searchable, and includes collaboration diagrams and call graphs.


<hr size="50px">
@section	gs-sdkcontents		SDK Contents

This section explores the contents of the SDK, which is nearly identical on all three platforms.

-	<b>ntv2sdk</b><i>PPP</i>_<i>XX</i><b>.</b><i>YY</i><b>.</b><i>ZZ</i><b>.</b><i>nn</i> — This is the folder that results from
	extracting the <b>.zip</b> file.  <i>PPP</i> is the platform, <i>XX</i> is the major version number, <i>YY</i> is the minor
	version number, <i>ZZ</i> is the point release number, and <i>nn</i> is the build number.
	-	<b>ajaapps</b> — Contains sources used to build applications and tools.
		-	<b>crossplatform  </b>
			-	<b>ajalogger</b> — Contains sources for \ref usingajalogger.
			-	<b>demoapps</b> — Contains sources for \ref demoapps.
			-	<b>pciwhacker</b> <i>(Linux only)</i> — Contains sources for “PCI Whacker”, a command-line tool that measures
				PCI throughput, similar to what the \ref systest-dev does in \ref usingsystemtest.
			-	<b>supportlog</b> — Contains sources for \ref usingsupportlog.
			-	<b>xenacablesfltk</b> <i>(Linux only)</i> — Contains sources for building \ref usingcables.
		-	<b>lin  </b><i>(Linux-only apps)</i>
		-	<b>win  </b><i>(Windows-only apps)</i>
	-	<b>ajadriver  </b><i>(Linux only)</i>
		-	<b>linux</b> — Device driver source code <i>(Linux only)</i>.
	-	<b>ajalibraries</b>
		-	<b>ajabase</b> — Contains \ref ajabase, which has several platform-independent utility classes for threading,
			locking, memory allocation, plug-and-play, logging, etc. Starting in SDK 15.0, these classes are provided in
			‘libajantv2’, not in ‘libajabase’.
		-	<b>ajaanc</b> — Contains \ref ajaanc, a set of handy classes for parsing and manipulating ancillary data packets.
			Starting in SDK 15.0, these classes are no longer proprietary, and are provided in ‘libajantv2’, not in ‘libajaanc’.
		-	<b>ajacc</b> — Contains the \ref ajacc, a proprietary class library handy for encoding, decoding and rendering CEA-608/708 captions.
		-	<b>ajantv2</b> — Contains the \ref ajantv2.
			-	<b>build</b> — <i>(MacOS & Windows only)</i>  Project solution files for building the SDK, tools and demo
				applications using Visual Studio (Windows) or Xcode (MacOS).
			-	<b>codecs</b> — Principal user level NTV2 HEVC classes and header files (\ref corvidhevc only, <i>Windows and Linux only</i>).
				See \ref hevcsupplement.
			-	<b>includes</b> — the NTV2 class header/include files.
			-	<b>src</b> — the NTV2 implementation source files (with platform-specific subdirectories).
	-	<b>bin</b> — Destination directory for all executables and requisite dynamically-loaded libraries.
		Also contains all pre-built \ref toolsandutilities.
	-	<b>build</b> — Provided for developers who prefer to use <a href="https://doc.qt.io/" target="_qt">Qt</a>
		and/or <a href="https://doc.qt.io/qtcreator/" target="_qtcreator">Qt Creator</a>.
		See \ref gs-qtbuild.
	-	<b>docs</b> — Contains a webloc file that points to the NTV2 online API documentation.
	-	<b>lib</b> — Contains the pre-built libraries. This is the destination directory for all static library builds.
	-	<b>gpustuff</b> — <i>(Linux & Windows only)</i>


@subsection		gs-contents-libs	SDK Libraries

The SDK distribution comes with the following libraries:
-	\ref ajantv2 which, starting with SDK 15.0, includes \ref ajabase and \ref ajaanc
-	\ref ajacc

On Windows, pre-built versions of the debug versions of the static and dynamic libraries are not installed.
These can be built using the provided Visual Studio project files.

On Linux, except for the proprietary libraries, pre-built versions of the static libraries are not provided.
They must be built using the provided Makefiles. Follow the instructions below (\ref gs-linuxsdkbuild).

@note	Avoid deriving subclasses from AJA-provided classes.
		AJA recommends using aggregation techniques to incorporate NTV2 functionality into your own classes.




<hr size="50px">
@section	gs-compatibility	SDK Forward and Backward Compatibility

The NTV2 source files originated many years ago from some of the earliest hardware products produced by AJA.
These products ceased being dependent on NTV2 many years ago, but unfortunately, their legacy symbols remained
in the SDK.

In addition, when the first NTV2 SDK was released, the video capture/playout devices it supported were circuit
boards fixed in a specific motherboard slot with barely enough I/O capability to handle a single stream of 4:2:2
YUV SD video. Today’s devices are hot-pluggable, support multiple channels, each with its own signal format, up
to 4Kp60 and beyond. As the SDK expanded over the years to support newer, faster devices, the older functions,
data types and constants remained, which resulted in a very unwieldy and confusing SDK that made it difficult
for OEM developers to quickly get up to speed.

@subsection	gs-deprecatemacro	The ‘NTV2_DEPRECATE’ Macros

Starting with the 11.3 SDK, AJA introduced the first <b>NTV2_DEPRECATE</b> macro, and gathered many of the
obsolete SDK functions, data types and constants under preprocessor \c #ifdef blocks:
@code
#if !defined(NTV2_DEPRECATE)
	. . .
	// Obsolete constants, data types and functions
	. . .
#endif  //  !defined(NTV2_DEPRECATE)
@endcode

This means that if the ::NTV2_DEPRECATE macro is undefined, then existing code that relies on the old APIs
will continue to compile, link and run.  If the ::NTV2_DEPRECATE macro is defined, then the obsolete APIs
disappear from the compilation, and build errors will result if they’re used.

Deprecation history:
-	<b>SDK 11.3:</b> ::NTV2_DEPRECATE macro introduced (but not defined anywhere).
-	<b>SDKs 11.3 - 12.3:</b> Shipped libraries built with old APIs intact (i.e. ::NTV2_DEPRECATE undefined, by default).
-	<b>SDK 12.4:</b> ::NTV2_DEPRECATE macro first defined in <b>ajatypes.h</b> header file. This was the first SDK
	that jettisoned the old APIs by default.
-	<b>SDK 12.5:</b> ::NTV2_DEPRECATE_12_5 macro defined in <b>ajatypes.h</b>. Deprecated APIs:
	-	CNTV2SignalRouter’s ‘addWithValue’ and ‘AddConnection’ methods that accepted NTV2RoutingEntry’s.
-	<b>SDK 12.6:</b> ::NTV2_DEPRECATE_12_6 macro defined in <b>ajatypes.h</b>. Deprecated APIs:
	-	The old AutoCirculate APIs (InitAutoCirculate, StartAutoCirculate, etc.)
	-	Jettisoned some old NTV2DeviceID’s
	-	GetFormatDescriptor global functions.
-	<b>SDK 12.7:</b> ::NTV2_DEPRECATE_12_7 macro defined in <b>ajatypes.h</b>. Deprecated APIs:
	-	CNTV2Card’s runtime bitfile-swapping functions.
	-	CNTV2Card::DisplayNTV2Error.
	-	The old virtual register constant names (to force use of new “kVReg…” names).
-	<b>SDK 13.0:</b> ::NTV2_DEPRECATE_13_0 macro defined in <b>ajatypes.h</b>. Deprecated APIs:
	-	NTV2FormatDescriptor constructors with bools for wide & tall VANC and 2Kx1080.
	-	GetFormatDescriptor global functions.
	-	\c kRegAuxInterruptDelay and \c kRegReserved89 registers got redeployed as ::kRegBitfileDate and ::kRegBitfileDate, respectively.
	-	::Fill8BitYCbCrVideoFrame and ::Fill10BitYCbCrVideoFrame utility functions.
	-	CNTV2Card::GetVideoActiveSize and CNTV2Card::GetVideoWriteSize utility functions that accept bools for wide & tall VANC.
-	<b>SDK 13.1:</b> ::NTV2_DEPRECATE_13_1 macro defined in <b>ajatypes.h</b>.
-	<b>SDK 14.0:</b> ::NTV2_DEPRECATE_14_0 macro defined in <b>ajatypes.h</b>. Deprecated APIs:
	-	::CNTV2Card’s RP188 functions that use ::RP188_STRUCT’s.
	-	Retired several mis-named NTV2DeviceID’s.
-	<b>SDK 14.1:</b> ::NTV2_DEPRECATE_14_1 macro defined in <b>ajatypes.h</b>.
-	<b>SDK 14.2:</b> ::NTV2_DEPRECATE_14_2 and ::NTV2_DEPRECATE_14_2 macros defined in <b>ajatypes.h</b>. Deprecated APIs:
	-	AJAAncillaryData::SetLocationVideoStream
	-	The 3-parameter variant of AJAAncillaryList::AddVANCData.
	-	AJA CC library’s caption logging control flags.

To build with an SDK’s deprecated API, comment out or remove its corresponding \c #define ::NTV2_DEPRECATE…
line in <b>ajatypes.h</b>, then rebuild the <b>ajantv2</b> library.


@note	It’s best to undefine macros from oldest-to-newest SDKs in contiguous blocks or unexpected results will occur.
		For example, do this:
		@code
		#define NTV2_DEPRECATE
		#define NTV2_DEPRECATE_12_5
		//#define NTV2_DEPRECATE_12_6
		//#define NTV2_DEPRECATE_12_7
		. . .
		@endcode
		… and not this:
		@code
		#define NTV2_DEPRECATE
		//#define NTV2_DEPRECATE_12_5
		//#define NTV2_DEPRECATE_12_6
		#define NTV2_DEPRECATE_12_7
		. . .
		@endcode

@note	AJA is planning to remove all deprecated symbols and APIs up through SDK 13.1 in SDK 15.0.
		Please prepare for this by porting your code to the latest SDK.
		The <a href="https://sdksupport.aja.com/index.php?/Knowledgebase/Article/View/186" target="_kb">NTV2 SDK Porting Guide</a> can help you.


@subsubsection		gs-condcompsdkvers	Conditional Compilation Based on NTV2 SDK Version

The NTV2 SDK now contains its version information as symbols defined in <b>ajatypes.h</b> (located inside <b>ajalibraries/ajantv2/includes</b>).
It defines the following symbols:
-	<b>AJA_NTV2_SDK_VERSION_MAJOR</b>	The SDK’s major version number (an unsigned numeric constant).
-	<b>AJA_NTV2_SDK_VERSION_MINOR</b>	The SDK’s minor version number (an unsigned numeric constant).
-	<b>AJA_NTV2_SDK_VERSION_POINT</b>	The SDK’s “point” version number (an unsigned numeric constant).
-	<b>AJA_NTV2_SDK_BUILD_NUMBER</b>	The SDK build number (an unsigned numeric constant).
-	<b>AJA_NTV2_SDK_BUILD_DATETIME</b>	The date and time the SDK was built, a string literal of the form “MM/DD/YYYY +/-Z:hh:mm:ss”,
	where <b>MM</b> is the 2-digit month (01 thru 12), <b>DD</b> is the 2-digit day number, <b>YYYY</b> is the 4-digit year, <b>+/-Z</b>
	is the number of hours relative to UTC, <b>hh</b> is the 2-digit hour (0 thru 23), <b>mm</b> is the number of minutes past the hour
	(0 thru 59), and <b>ss</b> is the number of seconds past the minute (0 thru 59).
-	<b>AJA_NTV2_SDK_BUILD_TYPE</b>	The SDK build type, a string literal containing a single character, where <b>d</b> means “development”,
	<b>a</b> means “alpha”, <b>b</b> means “beta” and the empty string means “release”.
-	<b>AJA_NTV2_SDK_VERSION</b>	An unsigned integer value built from the SDK version components that can be reliably compared with other
	version integer values.
There’s also a convenient macro for testing which SDK version is being used at compile-time:
	-	<b>AJA_NTV2_SDK_VERSION_AT_LEAST(major, minor)</b>	Yields “true” if the major and minor version numbers of the current SDK being compiled
		are at least (greater than or equal to) the specified major and minor values, respectively.
		To use this macro, first test for its existence. If it doesn’t exist, the SDK being compiled is earlier than 12.0.
		If it does exist, call it with the minimum version of the required SDK:
@code
	. . .
	#if defined (AJA_NTV2_SDK_VERSION_AT_LEAST)
		#if AJA_NTV2_SDK_VERSION_AT_LEAST (12, 0)
			if (deviceInfo.multiFormat)
				cout	<< "Device is multi-format (per-channel)" << endl;
		#endif   //  if NTV2 SDK version >= 12.0
	#endif   //  if defined (AJA_NTV2_SDK_VERSION_AT_LEAST)
@endcode


@subsubsection		gs-backwardcomp		Backward Compatibility

AJA always recommends that NTV2-based applications be built from the same SDK version as the installed driver they will be using.

@warning	While AJA always tries to maintain backward compatibility between newer SDKs and older drivers, AJA cannot guarantee correct
			operation of applications built from an older SDK running on a newer version driver, nor applications built from a newer SDK
			running on an older version driver.


@subsubsection		gs-forwardcomp		Firmware and Device Features

For a given SDK release, the \ref ntv2devicefeatures responses should be correct for all supported devices running the latest
firmware available on or after the SDK release date. AJA will do its best to document any exceptions on the SDK’s download
page and/or the device firmware page in the <a href="https://sdksupport.aja.com/index.php?/Knowledgebase/List">Knowledgebase</a>.



<hr size="50px">
@section		gs-sdkbuild		Building the Libraries

@subsection		gs-linuxsdkbuild	Building on Linux

On Linux, the libraries and device drivers are not pre-built, and must be compiled and linked on the host they are expected to run on.
-#	Be sure you have the requisite third-party software packages installed:
	-	<tt>g++</tt>
	-	<tt>libasound2</tt>
	-	<tt>libsound2-dev</tt>.
	Refer to your Linux distro’s documentation for the correct utility for managing packages.
	Note that package managers often install dependent packages, so it may not be necessary to explicitly load all the packages
	in the aforementioned list. (The Knowledgebase article from which the SDK was downloaded is authoritative for this information.)
-#	To build the <a href="https://doc.qt.io/" target="_qt">Qt</a>-based demo applications, you’ll need to install <a href="https://doc.qt.io/" target="_qt">Qt</a>
	(the <tt>qt5-dev-tools</tt> package).
	-	If your Linux distro’s package manager can’t get it, AJA recommends downloading and building <a href="https://doc.qt.io/" target="_qt">Qt</a> directly from sources.
	-	For more information about <a href="https://doc.qt.io/" target="_qt">Qt</a>, visit <http://qt.digia.com/>.
	-	Be sure the path to <a href="https://doc.qt.io/" target="_qt">Qt</a>’s <b>bin</b> directory is in the current path.
-#	Using a terminal, change to the sdk directory:
	<tt>$ cd sdk/</tt>
-#	<b>Corvid HEVC Only:</b>  Export the environment variable <tt>AJA_HEVC=MB31</tt> to include the HEVC API:
	<tt>$ export AJA_HEVC=MB31</tt>
-#	<b>Optional:</b> Export the environment variable <tt>NTV2_DEPRECATE=1</tt> to build everything without the old, deprecated functions and APIs:
	<tt>$ export NTV2_DEPRECATE=1</tt>
-#	<b>Optional:</b> Export the environment variable <tt>AJA_DEBUG=1</tt> if a debug build is required:
	<tt>$ export AJA_DEBUG=1</tt>
-#	Enter the \c make command. This will build all libraries, tools, utilities, demo applications, and the device driver.
	The built executables will appear in the “bin” directory (a peer to <b>ajalibraries</b>).
-#	Load the device driver:
    <tt>$ sudo bin/load_ajantv2</tt>
-#	Verify that the driver is installed by ...
	-	issuing an \c lsmod, and look for \c ajantv2 in the list;
	-	look inside \c /dev/proc and look for devices with \c ajantv2 in the name.

@note	The \ref ajantv2 in the SDK is built to link with GCC 5.0 and earlier, GCC versions after this introduced an ABI change.
		If you use the \ref ajacc, AJA supplies a GCC 5.1 and later compatible version of this library inside the <b>lib/gcc_5_1_and_after</b> directory.
		Swap it with the couterpart in the <b>lib</b> directory. Then follow the build steps above.<br><br>
		On CentOS (and possibly other Linux variants), the DVP demo app “dvplowlatencydemo” won’t run unless the \c libdvp.so
		shared library is copied into \c /usr/lib64.


@subsection		gs-macsdkbuild	Building on MacOS

On MacOS, the device driver is normally provided from the AJA Software installer, while the libraries are provided pre-built in the <tt>sdk/lib</tt> folder.
The \ref ajantv2 source code is provided, and the libraries can be built with debugging symbols as a troubleshooting aid.
-#	Launch <b>Xcode</b> and open the <b>ajantv2.xcodeproj</b> project file that’s inside the <tt>ajalibraries/ajantv2/build</tt> folder.
-#	Select the <b>libclasses</b> or <b>BuildAll</b> target as the current target.
-#	Choose <b>Build</b> from the <b>Product</b> menu.
-#	Look for the new \c libajantv2d.a library in the \c lib folder.

@note	The \ref ajantv2 in the SDK is built to link with the latest C++11 standard library.
		If your application must use the older \c stdc++ standard library, you must rebuild it to reference the stdc++ standard library:
		\code{.sh}
		$ xcrun xcodebuild -workspace ntv2.xcworkspace  -scheme 'All - libs and demos'  -configuration Debug  CLANG_CXX_LIBRARY=libstdc++  clean build
		\endcode
		If you use the \ref ajacc, AJA supplies a stdc++-compatible version of this library inside the <b>lib/libstdc++</b> folder.
		Swap it with the counterpart in the <b>lib</b> folder.<br><br>
		<b>Starting in Xcode 10, the GNU-ABI-based ‘libstdc++’ standard libraries and headers are gone.</b><br>
		To build using the older GNU-ABI-based ‘libstdc++’ libraries and headers, use Xcode 9 or earlier.


@subsection		gs-winsdkbuild	Building on Windows

On Windows, the device driver is normally installed from the provided \c .msi, and the libraries are provided pre-built in the \c sdk\\lib folder.
However, the \ref ajantv2 source code is provided, and the libraries can be built with debugging symbols as a troubleshooting aid.
-#	Launch <b>Visual Studio</b> and do one of the following:
	-	open the <b>ntv2_vs12.sln</b> solution file that’s inside \c sdk\\ajalibraries\\ajantv2\\build, or…
	-	drag one of <b>libajantv2_vs12.vcxproj</b> or <b>libajantv2dll_vs12.vcxproj</b> project files into your solution.
-#	Select the build configuration, whether Debug or Release, and 32 or 64 bit.
-#	Build the \ref ajantv2.
Look for the <b>.DLL</b> in \c sdk\\bin, or the <b>.LIB</b> in \c sdk\\lib.


@subsection		gs-qtbuild	Building With Qt

<a href="https://doc.qt.io/" target="_qt">Qt</a> is a cross-platform application framework used for developing applications that run on Linux,
MacOS and Windows with little or no change in the underlying codebase, while retaining native capabilities and speed.

<a href="https://doc.qt.io/qtcreator/" target="_qtcreator">Qt Creator</a> is a feature-rich integrated development environment (IDE)
that works identically on Linux, MacOS and Windows.

The NTV2 SDK now makes it easy to develop NTV2 applications with Qt’s <b>qmake</b> facility
or with the <a href="https://doc.qt.io/qtcreator/" target="_qtcreator">Qt Creator</a> IDE.
To get started, look for the <b>build</b> folder in the SDK:

-	<b>ntv2sdkPPP_XX.YY.ZZ.nn</b> — The extracted SDK folder.
	-	<b>build</b> — This folder contains a complete <b>qmake</b> build structure that builds the NTV2 libraries and demo applications.
		-	<b>_ntv2demos.pro</b> — This is the “solution file” or “project file” that builds everything — the libraries and the demonstration applications.
		-	<b>ajacc</b> — Contains the <b>.pri</b> and <b>.pro</b> files necessary to link with the \ref ajacc.
		-	<b>ajantv2</b> — Contains the <b>.pri</b> and <b>.pro</b> files necessary to build the \ref ajantv2.
		-	<b>config.pri</b> — This is the starting point for all the <b>qmake</b> magic used in all the <b>.pro</b> files. It defines common locations like the <b>bin</b> and <b>lib</b> directories.
		-	<b>libs.pri</b> — A helper <b>.pri</b> used by most of the <b>.pro</b>’s to simplify adding libraries and library dependencies.
		-	<b>local_config.pri</b> — An optional file that is used to override <b>qmake</b> settings in <b>config.pri</b>. It’s provided as an example to show how to produce <b>Debug</b> builds by default.
		-	<b>ntv2demos</b> — Contains the <b>.pri</b> and <b>.pro</b> files necessary to build the demonstration applications.

@par	Building with qmake/make:

Assuming at least one version of <a href="https://doc.qt.io/" target="_qt">Qt</a> is already installed:

-#	Change the current directory to \c build inside the unzipped SDK folder.
-#	Enter  \c path/to/qmake  \c _ntv2demos.pro
-#	Enter  \c make

@par	Building with <a href="https://doc.qt.io/qtcreator/" target="_qtcreator">Qt Creator</a>:</b>

Assuming <a href="https://doc.qt.io/qtcreator/" target="_qtcreator">Qt Creator</a> is installed...

-#	In the \c build folder, double-click <b>_ntv2demos.pro</b> (or open it from inside <a href="https://doc.qt.io/qtcreator/" target="_qtcreator">Qt Creator</a>).
-#	<a href="https://doc.qt.io/qtcreator/creator-targets.html" target="_qtcreator">Assign it a kit</a>.
-#	Build the project.

The built libraries will be in \c lib ; the built executables will be in \c bin (both are peers to \c ajalibraries).


<hr size="50px">

@section	gs-newprojects	Creating New Projects With the SDK

NTV2-based applications are commonly built using makefiles on Linux, and using an IDE on MacOS (XCode) and Windows (Visual Studio).


@subsection	gs-newlinprojects	Linux

NTV2-based Linux applications can be built using the static libraries or the shared objects (.so files). These should have been built when
the SDK was built.

Many OEM developers choose to create their own NTV2-based projects “from scratch.” At a minimum, you’ll need to do the following:
-	Linux makefiles employ the environment variable \c $NTV2_ROOT. If your new project is placed outside of the SDK tree, then it must
	be defined (e.g., \c export \c NTV2_ROOT=path/to/ajalibraries/ajantv2 ).
-	Be sure to define \c AJALinux.
-	If you need to be able to debug and step into SDK functions, you will need to build a debug version of the SDK,
	this time setting a special environment variable: \c export \c AJA_DEBUG=1. The resulting libraries will have
	the same names, but will appear in the directory \c ajalibraries/ajantv2/lib-DEBUG.


@subsection	gs-newmacprojects	Mac OS X

NTV2-based MacOS applications must be built using the provided static libraries, or by including the NTV2 source
code directly into the Xcode project. AJA will not provide dynamically-loaded libraries (<b>.dylib</b>s) or frameworks
for any of its libraries on the MacOS platform.

Many OEM developers choose to create their own NTV2-based Xcode projects “from scratch.” At a minimum, the following
<b>XCode</b> build parameters must be set:
-	Use the “Latest Mac OS X” SDK. (The SDK can be built against MacOS SDK 10.9 or later.)
-	Use a “Mac OS X Deployment Target” of 10.9 (“Mountain Lion”) or later.
-	Use \c x86_64 (64-bit) architecture.
-	Define both preprocessor macros \c AJAMac and \c AJA_MAC.
-	Add the following header search paths:
	-	\c sdkdir/ajalibraries/ajantv2/includes
	-	\c sdkdir/ajalibraries/ajantv2/src/mac
	-	\c sdkdir/ajalibraries/ajabase
	-	\c sdkdir/ajalibraries/ajaanc
	-	\c sdkdir/ajalibraries/ajacc (only if the \ref ajacc is needed)
-	It is not necessary to always search “user” header paths.
-	Use inch marks (i.e. "), and not angle brackets (i.e. <>) when quoting AJA header file names in \c #include statements.
-	Add the following library search paths:
	-	\c sdkdir/lib
-	Add the following to the “Other Linker Flags” setting:
	-	\c -lajantv2 (Release) or <b>-lajantv2d</b> (Debug)
	-	\c -lajacc, if the \ref ajacc is needed

@warning	The libraries shipped with the SDK for MacOS are \c x86_64 (64-bit) only.
			AJA no longer supports the \c i386 (Intel 32-bit) or PowerPC architectures.

@note	The libraries shipped with the SDK for MacOS are built without referencing C++11 standard library support.
		The Xcode build setting that controls this is \c CLANG_CXX_LIBRARY (a.k.a. “C++ Standard Library”).
		This build setting must match for all compilands passed to the linker — otherwise “undefined symbols” errors will result.
		See \ref gs-macsdkbuild for more information.


@subsection	gs-newwinprojects	Windows

Windows builds are structured with projects (.vcproj files) grouped into a solution (.sln file).
The solution files for building the entire SDK can be found here:
-	\c sdkdir\\ajalibraries\\ajantv2\\build\\ntv2_vs12.sln		(for VS2013+)
-	\c sdkdir\\ajalibraries\\ajantv2\\build\\ntv2_vs9.sln		(for all others)

Choose “build all” to build all of the SDK libraries and the demo applications that use the libraries.

Many OEM developers choose to create their own solution and project files “from scratch.” Here are the essential requirements:
-	Choose whether to use AJA’s pre-built NTV2 dynamic libraries (.DLL’s) or static libraries (.LIB’s). There are advantages and disadvantages to both.
-	Define the preprocessor macros \c WIN32, \c _WINDOWS, \c MSWindows and \c AJA_WINDOWS.
-	For Release builds, define the preprocessor macro \c NDEBUG. For Debug builds, define both \c _DEBUG and \c AJA_DEBUG.
-	If you use AJA’s pre-built DLLs, define the preprocessor macro \c AJA_NO_AUTOIMPORT.
-	Add the following header search paths:
	-	\c sdkdir\\ajalibraries\\ajantv2\\includes
	-	\c sdkdir\\ajalibraries\\ajantv2\\src\\win
	-	\c sdkdir\\ajalibraries\\ajabase
	-	\c sdkdir\\ajalibraries\\ajacc (if \ref ajacc needed)
	-	\c sdkdir\\ajalibraries\\ajaanc
-	The preprocessor should always search “user” header paths.
-	Add the following library search paths:
	-	For DLLs, \c sdkdir\\bin
	-	For LIBs, \c sdkdir\\lib
-	Add the appropriate SDK <b>.vcproj</b> file(s) to your solution as needed, then make your build target(s) dependent upon them. This will configure the linker properly.
-	It’s important to link with the correct runtime libraries. When using AJA’s static libraries, link with Multi-threaded \c /MT or Multi-threaded debug \c /Mtd
	runtime libraries. When using AJA’s dynamic libraries, link with Multi-threaded-DLL \c /MD or Multi-threaded DLL debug \c /MDd runtime libraries.
-	When using the \ref ajacc (found in the \c lib directory), it’s important to link with the one that’s correct for the Visual Studio
	compiler being used. The library names are decorated with the Visual Studio compiler version (\c _vs10, \c _vs11, etc.), Win32 or x64 (\c _32 or \c _64),
	and the runtime library they’re compatible with (undecorated is \c /MT, \c d for \c /Mtd, \c MD for \c /MD, and \c MDd for \c /MDd ).
-	When using AJA’s pre-built DLLs, AJA recommends configuring your solution to place build products in the same \c bin directory that contains AJA’s pre-built
	executables. This will speed development, since the requisite DLLs can readily be found by your application at run time.

**/
